"""Create users table

Revision ID: dbec90c85672
Revises: 
Create Date: 2024-10-26 18:52:31.661716

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.engine import Engine


# revision identifiers, used by Alembic.
revision: str = 'dbec90c85672'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create the users table if it does not exist
    conn: Engine = op.get_bind()
    if not conn.dialect.has_table(conn, 'users'):
        op.create_table(
            'users',
            sa.Column('id', sa.String(), nullable=False),
            sa.Column('password', sa.String(), nullable=False),
            sa.Column('gender', sa.Integer(), nullable=False),
            sa.PrimaryKeyConstraint('id')
        )
    
    # Create the temp_table if it does not exist
    if not conn.dialect.has_table(conn, 'temp_table'):
        op.create_table(
            'temp_table',
            sa.Column('관광지', sa.TEXT(), nullable=True),
            sa.Column('성별', sa.INTEGER(), nullable=True),
            sa.Column('나이', sa.INTEGER(), nullable=True),
            sa.Column('관계', sa.INTEGER(), nullable=True),
            sa.Column('평점', sa.INTEGER(), nullable=True),
            sa.Column('지역', sa.TEXT(), nullable=True),
            sa.Column('ID', sa.INTEGER(), nullable=True)
        )
    
    # Create the SPOT table if it does not exist
    if not conn.dialect.has_table(conn, 'SPOT'):
        op.create_table(
            'SPOT',
            sa.Column('ATTRACTION_NAME', sa.TEXT(), nullable=True),
            sa.Column('주소', sa.TEXT(), nullable=True),
            sa.Column('위도', sa.REAL(), nullable=True),
            sa.Column('경도', sa.REAL(), nullable=True),
            sa.Column('LOCATION_ID', sa.TEXT(), nullable=True)
        )
    
    # Create the GRADE table if it does not exist
    if not conn.dialect.has_table(conn, 'GRADE'):
        op.create_table(
            'GRADE',
            sa.Column('ID', sa.INTEGER(), primary_key=True),
            sa.Column('관광지', sa.TEXT(), nullable=True),
            sa.Column('성별', sa.INTEGER(), nullable=True),
            sa.Column('나이', sa.INTEGER(), nullable=True),
            sa.Column('관계', sa.INTEGER(), nullable=True),
            sa.Column('평점', sa.INTEGER(), nullable=True),
            sa.Column('지역', sa.TEXT(), nullable=True)
        )
    
    # If sqlite_sequence table is necessary for some reason, create it if it does not exist
    if not conn.dialect.has_table(conn, 'sqlite_sequence'):
        op.create_table(
            'sqlite_sequence',
            sa.Column('name', sa.NullType(), nullable=True),
            sa.Column('seq', sa.NullType(), nullable=True)
        )
    
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Drop the GRADE table if it exists
    if op.get_bind().dialect.has_table(op.get_bind(), 'GRADE'):
        op.drop_table('GRADE')
    
    # Drop the SPOT table if it exists
    if op.get_bind().dialect.has_table(op.get_bind(), 'SPOT'):
        op.drop_table('SPOT')

    # Drop the temp_table if it exists
    if op.get_bind().dialect.has_table(op.get_bind(), 'temp_table'):
        op.drop_table('temp_table')

    # Drop the users table if it exists
    if op.get_bind().dialect.has_table(op.get_bind(), 'users'):
        op.drop_table('users')

    # Drop the sqlite_sequence table if it exists
    if op.get_bind().dialect.has_table(op.get_bind(), 'sqlite_sequence'):
        op.drop_table('sqlite_sequence')
    
    # ### end Alembic commands ###
